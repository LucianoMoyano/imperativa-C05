const prompt = require("prompt-sync")({ sigint: true });
("------------------------ CLASE FUNCIONES -------------------------");

/*
- ¬øQu√© Es Una Funci√≥n?
Una Funci√≥n es un bloque de c√≥digo que nos permite realizar una tarea
en particular. Para que la Funci√≥n se ejecute, "algo" debe invocarla.
Es una herramienta muy √∫til porque estiliza el c√≥digo y lo hace m√°s
escalable.

Las Funciones, inicialmente, deben ser definidas y, luego, deben ser
llamadas para que se puedan ejecutar.

*/

// Sintaxis De La Funci√≥n
 
/* 
// funcion expresada
let funcion = function(){

}

//funcion declarada
function nombreFuncion (){

}

//arrow function
let arrow = ( ) => {}

//crear una funcion y ponerle un nombre o nombrarla
function nombreDeLaFuncion (){
  //los parentesis debe quedar vacios, hasta instanciar los parametros que vamos a utilizar, y luego vamos a abrir las llaves para alojar las instrucciones.
  console.log("Soy un funcion!") //bloque de codigo que se va a ejecutar
}// cerramos la llave

nombreDeLaFuncion() //llamada de la funcion y la ejecuci√≥n

 */




 

/*
- ¬øQu√© Es Un Par√°metro?*
Un Par√°metro es una Variable que creamos al momento de definir una
Funci√≥n y, cada vez que la ejecutamos, le pasamos un argumento(su
valor) como input.


*/
/* 

function cantarCumple ( persona, persona1 ){
  console.log("que los cumplas feliz")
  console.log("que los cumplas feliz")
  console.log("que los cumplas feliz " + persona + "!")
  console.log("que los cumplas feliz")
}

cantarCumple("Claudia")

//-------------------------

function areaCuadrado (lado){
  console.log(lado * lado)
}
areaCuadrado(3)

 */

/*
- Funciones Con M√∫ltiples Par√°metros
Podemos ejecutar las Funciones pas√°ndoles todos los Par√°metros que necesitemos.

Sintaxis De Las Funciones Con M√∫ltiples Par√°metros
Debemos separar los Par√°metros con una coma.
  */
/* 
function areaTriangulo (base, altura){
  console.log((base * altura) / 2)
}

areaTriangulo(2, 5 ) // importante: el orden de los argumentos, puede afectar el resultado


//--------------------

function saludarTres(nombre1, nombre2, nombre3){
  console.log("Hola " + nombre1)
  console.log("Hola " + nombre2)
  console.log("Hola " + nombre3)
}

saludarTres("Ron", "Harry", "Hermione") 
saludarTres("Hermione", "Ron", "Harry")
 */




/*
- Funciones Con Variables Por ParaÃÅmetro
El Par√°metro que le pasemos a una Funci√≥n tambi√©n puede ser un valor
guardado en una Variable.

al ejecutar una Funci√≥n que lleve un input, podemos pasarle una
Variable como ParaÃÅmetro. Por ejemplo:
*/

function cantarCumple1 (persona){
  console.log("QUe los cumplas feliz " + persona + "!")
}

let nombre = prompt("Cual es tu nombre?: ")
cantarCumple1(nombre)






/*
- Par√°metros Por Default
Los Par√°metros Por Default permiten que los Par√°metros de una Funci√≥n
sean definidos con un valor inicial.

Ejemplo:
*/

//Para asignar un valor por default a un parametro, tenemos que agregar el simbolo =, sguido del valor despues del parametro
function multiplicacion (a, b = 2, c){
  console.log( a * b )
}

multiplicacion(5, 3) //si agregamos el valor como argumento, va a estar pisando el valor que le agregamos por default

//------------------------------

let suma = ( a, b = 0 ) => {
  return a + b
}

console.log(suma()) // Nan
console.log(suma(3)) // 3










/*
- La Keyword return
La keyword return se usa al declarar una Funci√≥n para devolver un
valor espec√≠fico de ella. Esto sucede para guardar ese valor en una
Variable o usarlo por fuera del bloque de definici√≥n de la Funci√≥n.

Importante: Al usar esta palabra reservada se da por finalizada la
ejecuci√≥n de la Funci√≥n, independientemente de la extensi√≥n del bloque
de c√≥digo.

ejemplo:
*/

/* function cuadrado (numero){
  console.log(numero * numero)
}

cuadrado(4) // 16
console.log("El resultado de 4 al cuadrado es: " + cuadrado(4)) //
 */


/* function cuadrado (numero){
  return numero * numero 
}

console.log(cuadrado(4)) // 16
console.log("El resultado de 4 al cuadrado es: " + cuadrado(4)) */ //16

function valor (a, b, c){
  console.log(a)
  return b * c
  console.log(b)
}
console.log(valor(15, 20, 25))


/*
- Arrow Functions üèπ
Las Arrow Functions son una alternativa a la funci√≥n cl√°sica. Estas
son incorporadas a partir de ES6 y se ven a menudo en dferentes
ejemplos de internet.

Una de sus ventajas es que su sintaxis es m√°s compacta y flexible que
las Funciones cl√°sicas creadas con function.

*/
// Funci√≥n Cl√°sica

function sum (a, b){
  return a + b
}
console.log(sum(2,4))


/*    
Sintaxis
Las Arrow Functions se componen de 3 partes:

Los par√°metros entre par√©ntesis, en este caso (a,b).
Del lado derecho de los par√°metros, un Token (=>).
Por √∫ltimo, las llaves donde dentro estar√°n las acciones que se deban
ejecutar. */
// Arrow Function


/* Las Arrow Functions son muy flexibles a la hora de codear. Su
sintaxis se puede adaptar a cada caso.
 */
//1-
let sum = (a, b) => { return a + b}

//2-
let sum = (a, b) =>  a + b

//3- cuando utilizamos un solo parametro tampoco vamos a necesitar de los parentesis ()

let resta = a =>  a - a

//Ejercicios resueltos!

/* Crear una funci√≥n que convierta pulgadas en cent√≠metros.
Recibe por par√°metro pulgadas y retorna su equivalente en cent√≠metros. */

function pulgadasACm(pulgadas) {
  return pulgadas * 2.54;
}
pulgadasACm(5);

/* Crear una funci√≥n que recibe un string y lo convierte en una URL. 
ej: ‚Äúpepito‚Äù es devuelto como ‚Äúhttp://www.pepito.com‚Äù
 */

function url(string) {
  return "http://www." + string + ".com";
}
url("pepito");

/* Crear una funci√≥n que recibe un string y devuelve la misma frase pero con admiraci√≥n. */

function admirador(palabra) {
  return palabra + "!!!";
}
admirador("Bienvenidos");

/* Crear una funci√≥n que calcule la edad de los perros, considerando que 1 a√±o para nosotros son 7 de ellos. */

function edadPerro(edadHumano) {
  return edadHumano * 7;
}
edadPerro(27);

let edadPerro = (edadHumano) => edadHumano * 7;
edadPerro(27);

/* Crear una funci√≥n que calcule el valor de tu hora de trabajo, introduciendo tu sueldo mensual como par√°metro.
PD: considera que tu mes de trabajo tiene 40 horas. */

function valorHora(sueldo) {
  return sueldo / 40;
}
valorHora(1500);

/* Crear la funci√≥n calculadorIMC() que reciba la altura en metros y el peso en kilogramos y calcule el imc de una persona.  Luego, ejecutar la funci√≥n probando diferentes valores. */

function imc(peso, altura) {
  return peso / (altura * altura);
}
imc(75, 1.73);

let imc = (peso, altura) => peso / (altura * altura);
imc(75, 1.73);

/* Crear una funci√≥n que recibe un string en min√∫scula, lo convierta a may√∫sculas y lo retorne. 
Investiga que hace el m√©todo de strings .toUpperCase() */

function mayus(string) {
  return string.toUpperCase();
}
mayus("hola como estan?");

/* Crear una funci√≥n que recibe un par√°metro y devuelve qu√© tipo de dato es ese par√°metro. 
pista: te servir√° revisar que hace la palabra reservada typeof. */

function tipoDeDato(dato) {
  return typeof dato;
}
tipoDeDato(false);
tipoDeDato(27);
tipoDeDato("Nancy");

/* Crear una funci√≥n que le pasamos el radio de un c√≠rculo y nos devuelve la circunferencia.
Pista: Investiga si el objeto Math tiene entre sus propiedades el n√∫mero Pi */

function circulo(radio) {
  return Math.PI * radio * 2;
}
circulo(2);
